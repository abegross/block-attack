[gd_resource type="VisualShader" load_steps=13 format=2]

[sub_resource type="VisualShaderNodeVectorDecompose" id=1]

[sub_resource type="VisualShaderNodeVectorDecompose" id=2]

[sub_resource type="VisualShaderNodeVectorCompose" id=3]

[sub_resource type="VisualShaderNodeTexture" id=4]
source = 1

[sub_resource type="VisualShaderNodeTexture" id=5]
source = 1

[sub_resource type="VisualShaderNodeTexture" id=6]
source = 1

[sub_resource type="VisualShaderNodeVec3Uniform" id=7]
uniform_name = "ca"

[sub_resource type="VisualShaderNodeInput" id=8]
input_name = "screen_uv"

[sub_resource type="VisualShaderNodeVectorOp" id=9]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0.008, 0.008, 0 ) ]

[sub_resource type="VisualShaderNodeVectorOp" id=10]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( -0.008, -0.008, 0 ) ]
operator = 1

[sub_resource type="VisualShaderNodeVectorOp" id=11]

[sub_resource type="VisualShaderNodeVectorDecompose" id=12]

[resource]
code = "shader_type canvas_item;
uniform vec3 ca;



void vertex() {
// 出力:0

}

void fragment() {
// 入力:2
	vec3 n_out2p0;
	n_out2p0 = vec3(SCREEN_UV,0.0);

// VectorUniform:16
	vec3 n_out16p0;
	n_out16p0 = ca;

// VectorOp:3
	vec3 n_out3p0;
	n_out3p0 = n_out2p0 + n_out16p0;

// Texture:13
	vec3 n_out13p0;
	float n_out13p1;
	{
		vec4 _tex_read = textureLod( SCREEN_TEXTURE , n_out3p0.xy, 0.0 );
		n_out13p0 = _tex_read.rgb;
		n_out13p1 = _tex_read.a;
	}

// VectorDecompose:9
	float n_out9p0;
	float n_out9p1;
	float n_out9p2;
	n_out9p0 = n_out13p0.x;
	n_out9p1 = n_out13p0.y;
	n_out9p2 = n_out13p0.z;

// VectorOp:5
	vec3 n_in5p1 = vec3(0.00000,0.00000,0.00000);
	vec3 n_out5p0;
	n_out5p0 = n_out2p0 + n_in5p1;

// Texture:14
	vec3 n_out14p0;
	float n_out14p1;
	{
		vec4 _tex_read = textureLod( SCREEN_TEXTURE , n_out5p0.xy, 0.0 );
		n_out14p0 = _tex_read.rgb;
		n_out14p1 = _tex_read.a;
	}

// VectorDecompose:10
	float n_out10p0;
	float n_out10p1;
	float n_out10p2;
	n_out10p0 = n_out14p0.x;
	n_out10p1 = n_out14p0.y;
	n_out10p2 = n_out14p0.z;

// VectorOp:4
	vec3 n_out4p0;
	n_out4p0 = n_out2p0 - n_out16p0;

// Texture:15
	vec3 n_out15p0;
	float n_out15p1;
	{
		vec4 _tex_read = textureLod( SCREEN_TEXTURE , n_out4p0.xy, 0.0 );
		n_out15p0 = _tex_read.rgb;
		n_out15p1 = _tex_read.a;
	}

// VectorDecompose:11
	float n_out11p0;
	float n_out11p1;
	float n_out11p2;
	n_out11p0 = n_out15p0.x;
	n_out11p1 = n_out15p0.y;
	n_out11p2 = n_out15p0.z;

// VectorCompose:12
	vec3 n_out12p0;
	n_out12p0 = vec3( n_out9p0 , n_out10p1 , n_out11p2 );

// 出力:0
	COLOR.rgb = n_out12p0;

}

void light() {
// 出力:0

}
"
graph_offset = Vector2( -128, 164 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 840, 340 )
nodes/fragment/2/node = SubResource( 8 )
nodes/fragment/2/position = Vector2( -240, 340 )
nodes/fragment/3/node = SubResource( 9 )
nodes/fragment/3/position = Vector2( 0, 200 )
nodes/fragment/4/node = SubResource( 10 )
nodes/fragment/4/position = Vector2( 0, 440 )
nodes/fragment/5/node = SubResource( 11 )
nodes/fragment/5/position = Vector2( 0, 320 )
nodes/fragment/9/node = SubResource( 12 )
nodes/fragment/9/position = Vector2( 400, 220 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( 400, 340 )
nodes/fragment/11/node = SubResource( 2 )
nodes/fragment/11/position = Vector2( 400, 460 )
nodes/fragment/12/node = SubResource( 3 )
nodes/fragment/12/position = Vector2( 620, 340 )
nodes/fragment/13/node = SubResource( 4 )
nodes/fragment/13/position = Vector2( 220, 200 )
nodes/fragment/14/node = SubResource( 5 )
nodes/fragment/14/position = Vector2( 220, 320 )
nodes/fragment/15/node = SubResource( 6 )
nodes/fragment/15/position = Vector2( 220, 440 )
nodes/fragment/16/node = SubResource( 7 )
nodes/fragment/16/position = Vector2( -220, 440 )
nodes/fragment/connections = PoolIntArray( 9, 0, 12, 0, 10, 1, 12, 1, 11, 2, 12, 2, 3, 0, 13, 0, 13, 0, 9, 0, 14, 0, 10, 0, 15, 0, 11, 0, 12, 0, 0, 0, 5, 0, 14, 0, 4, 0, 15, 0, 2, 0, 3, 0, 2, 0, 5, 0, 2, 0, 4, 0, 16, 0, 3, 1, 16, 0, 4, 1 )

